#include <stdio.h>

struct Process {
    int pid;
    int burst;
    int arrival;
    int priority;
    int finish;
    int tat;   
    int wait;  
    int completed;
};

void findTimes(struct Process p[], int n) {
    int currentTime = 0, completed = 0, minIdx;

    while (completed < n) {
        int highestPriority = 99999;
        minIdx = -1;

        for (int i = 0; i < n; i++) {
            if (p[i].arrival <= currentTime && !p[i].completed && p[i].priority < highestPriority) {
                highestPriority = p[i].priority;
                minIdx = i;
            }
        }

        if (minIdx != -1) {
            currentTime += p[minIdx].burst;
            p[minIdx].finish = currentTime;
            p[minIdx].tat = p[minIdx].finish - p[minIdx].arrival;
            p[minIdx].wait = p[minIdx].tat - p[minIdx].burst;
            p[minIdx].completed = 1;
            completed++;
        } else {
            currentTime++;
        }
    }
}

void printGanttChart(struct Process p[], int n) {
    printf("\nGantt Chart:\n");
    printf(" ");
    for (int i = 0; i < n; i++) {
        printf("-------");
    }
    printf("\n|");
    for (int i = 0; i < n; i++) {
        printf(" P%d\t|", p[i].pid);
    }
    printf("\n ");
    for (int i = 0; i < n; i++) {
        printf("-------");
    }
    printf("\n");

    printf("0");
    for (int i = 0; i < n; i++) {
        printf("\t%d", p[i].finish);
    }
    printf("\n");
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process p[n];

    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter arrival time, burst time, and priority for process P%d: ", p[i].pid);
        scanf("%d %d %d", &p[i].arrival, &p[i].burst, &p[i].priority);
        p[i].completed = 0;
    }


    printf("\nProcess\tArrival\tBurst\tPriority\tFinish\tTurnaround\tWaiting\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t\t%d\t%d\t\t%d\n", 
                p[i].pid, p[i].arrival, p[i].burst, p[i].priority, p[i].finish, p[i].tat, p[i].wait);
    }

    printGanttChart(p, n);

    return 0;
}


