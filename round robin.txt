#include <stdio.h>

struct Process {
    int pid;
    int burst;
    int arrival;
    int remaining;
    int finish;
    int tat;   
    int wait;  
};

void findTimes(struct Process p[], int n, int quantum) {
    int currentTime = 0, completed = 0;
    int queue[n], front = 0, rear = 0;
    int visited[n];
    for (int i = 0; i < n; i++) visited[i] = 0;

    while (completed < n) {
        for (int i = 0; i < n; i++) {
            if (p[i].arrival <= currentTime && p[i].remaining > 0 && !visited[i]) {
                queue[rear++] = i;
                visited[i] = 1;
            }
        }

        if (front < rear) {
            int idx = queue[front++];
            if (p[idx].remaining <= quantum) {
                currentTime += p[idx].remaining;
                p[idx].finish = currentTime;
                p[idx].tat = p[idx].finish - p[idx].arrival;
                p[idx].wait = p[idx].tat - p[idx].burst;
                p[idx].remaining = 0;
                completed++;
            } else {
                currentTime += quantum;
                p[idx].remaining -= quantum;

                queue[rear++] = idx;
            }
        } else {
            currentTime++;
        }
    }
}

void printGanttChart(struct Process p[], int n) {
    printf("\nGantt Chart:\n");
    printf(" ");
    for (int i = 0; i < n; i++) {
        printf("-------");
    }
    printf("\n|");
    for (int i = 0; i < n; i++) {
        printf(" P%d\t|", p[i].pid);
    }
    printf("\n ");
    for (int i = 0; i < n; i++) {
        printf("-------");
    }
    printf("\n");

    printf("0");
    for (int i = 0; i < n; i++) {
        printf("\t%d", p[i].finish);
    }
    printf("\n");
}

int main() {
    int n, quantum;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter time quantum: ");
    scanf("%d", &quantum);

    struct Process p[n];

    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter arrival time and burst time for process P%d: ", p[i].pid);
        scanf("%d %d", &p[i].arrival, &p[i].burst);
        p[i].remaining = p[i].burst;
    }

    findTimes(p, n, quantum);

    printf("\nProcess\tArrival\tBurst\tFinish\tTurnaround\tWaiting\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t%d\t\t%d\n", 
                p[i].pid, p[i].arrival, p[i].burst, p[i].finish, p[i].tat, p[i].wait);
    }

    printGanttChart(p, n);

    return 0;
}
